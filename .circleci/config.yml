#
#  Globality autogenerated CircleCI configuration
#
#  This file is auto generated with globality-build.
#  You should not make any changes to this file manually
#
#  Any changes made to this file will be overwritten in the
#  next version of the build.
#
#  See: http://github.com/globality-corp/globality-build
#
#

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2020.22.0
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"

deploy_defaults: &deploy_defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2020.22.0
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"


whitelist: &whitelist
  paths:
    .

version: 2

jobs:
  checkout:
    <<: *defaults

    steps:
      - checkout

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist

  build_docker:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker:
          docker_layer_caching: true


      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)
      - run:
          name: Build Docker - Application Service Code
          command: |

            docker build --tag $AWS_ECR_DOMAIN/papaya-extractor-code:$CIRCLE_SHA1 \
              --build-arg BUILD_NUM=$CIRCLE_BUILD_NUM \
              --build-arg SHA1=$CIRCLE_SHA1 \
              --build-arg EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --build-arg JFROG_AUTH=$JFROG_AUTH \
              --build-arg NAME=papaya-extractor \
              --target appcode .

            docker push $AWS_ECR_DOMAIN/papaya-extractor-code:$CIRCLE_SHA1

      # ------------------------------------------------------------------------------ #
      # current build - to be phased out
      # ------------------------------------------------------------------------------ #
      - run:
          name: Build Docker - Application Service
          command: |
            

            docker build --tag $AWS_ECR_DOMAIN/papaya-extractor:$CIRCLE_SHA1 \
              --build-arg BUILD_NUM=$CIRCLE_BUILD_NUM \
              --build-arg SHA1=$CIRCLE_SHA1 \
              --build-arg EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --build-arg JFROG_AUTH=$JFROG_AUTH \
              --target service .

            docker push $AWS_ECR_DOMAIN/papaya-extractor:$CIRCLE_SHA1


  test:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)


      - run:
          name: Create Volume - Test Codes
          command: |
            docker create --name service_tests --volume service_tests:/venv/src/papaya_extractor/tests alpine
            docker cp $(pwd)/papaya_extractor/tests service_tests:/venv/src/papaya_extractor/

      - run:
          name: Create Volume - Application Source Codes
          command: |
            docker run --rm -d --name appcode --mount source=service_appcode,target=/venv ${AWS_ECR_DOMAIN}/papaya_extractor-code:${CIRCLE_SHA1}

      - run:
          name: Run Tests
          command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local
            docker run -it --name apphead-services  \
              --env NAME=papaya-extractor \
              --env EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --mount source=service_appcode,target=/venv \
              --mount source=service_tests,target=/venv/src/papaya-extractor/tests \
              -w /venv/src \
              ${AWS_ECR_DOMAIN}/apphead-services test



  lint:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)

      - run:
          name: Create Volume - Test Codes
          command: |
            docker create --name service_tests --volume service_tests:/venv/src/papaya_extractor/tests alpine
            docker cp $(pwd)/papaya_extractor/tests service_tests:/venv/src/papaya_extractor/

      - run:
          name: Create Volume - Application Source Codes
          command: |
            docker run --rm -d --name appcode --mount source=service_appcode,target=/venv ${AWS_ECR_DOMAIN}/papaya_extractor-code:${CIRCLE_SHA1}

      - run:
          name: Run Lint
          command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local
            docker run -it --name apphead-services -w /venv/src \
              --env NAME=papaya-extractor \
              --env EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --mount source=service_appcode,target=/venv \
              --mount source=service_tests,target=/venv/src/papaya-extractor/tests \
              ${AWS_ECR_DOMAIN}/apphead-services lint

  typehinting:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)

      - run:
          name: Create Volume - Test Codes
          command: |
            docker create --name service_tests --volume service_tests:/venv/src/papaya_extractor/tests alpine
            docker cp $(pwd)/papaya_extractor/tests service_tests:/venv/src/papaya_extractor/

      - run:
          name: Create Volume - Application Source Codes
          command: |
            docker run --rm -d --name appcode --mount source=service_appcode,target=/venv ${AWS_ECR_DOMAIN}/papaya_extractor-code:${CIRCLE_SHA1}

      - run:
          name: Run Typehinting
          command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local
            docker run -it --name apphead-services -w /venv/src \
              --env NAME=papaya-extractor \
              --env EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --mount source=service_appcode,target=/venv \
              --mount source=service_tests,target=/venv/src/papaya-extractor/tests \
              ${AWS_ECR_DOMAIN}/apphead-services typehinting
  deploy_owndev:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy owndev
          command: |
            export CLUSTER="service-owndev"
            export ENVIRONMENT=$(globality-build get-dev --branch ${{CIRCLE_BRANCH}})
            if [ -z "$ENVIRONMENT" ]
            then
                exit 0
            fi
            export NAME=papaya-extractor
            globality-build docker-tag \
                --service papaya-extractor \
                --sha ${CIRCLE_SHA1} \
                --tag ${CIRCLE_BRANCH//\//-}
            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  deploy_demo:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy demo
          command: |
            export CLUSTER="service-demo"
            export ENVIRONMENT=demo
            if [ -z "$ENVIRONMENT" ]
            then
                exit 0
            fi
            export NAME=papaya-extractor
            globality-build docker-tag \
                --service papaya-extractor \
                --sha ${CIRCLE_SHA1} \
                --tag master
            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  backup_ecr_demo:
    <<: *deploy_defaults
    steps:
      - setup_remote_docker
      - run:
          name: Backup ECR demo
          command: |
            DESTINATION_REGION=eu-west-1
            eval $(aws ecr get-login --no-include-email --region $DESTINATION_REGION)
            globality-build docker-duplicate \
                --service papaya-extractor \
                --tag master \
                --destination-region $DESTINATION_REGION \
                --no-dry-run


workflows:
  version: 2

  build-and-release:
    jobs:
      - checkout:
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - build_docker:
          requires:
            - checkout
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - test:
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - lint:
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - typehinting:
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - deploy_owndev:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              only: /.*/

      - deploy_demo:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              only: master

      - backup_ecr_demo:
          requires:
            - deploy_demo
          filters:
            branches:
              only: master


