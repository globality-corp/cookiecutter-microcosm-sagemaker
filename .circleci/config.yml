#
#  Globality autogenerated CircleCI configuration
#
#  This file is auto generated with globality-build.
#  You should not make any changes to this file manually
#
#  Any changes made to this file will be overwritten in the
#  next version of the build.
#
#  See: http://github.com/globality-corp/globality-build
#
#

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2020.28.11
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"

deploy_defaults: &deploy_defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2020.28.11
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"


whitelist: &whitelist
  paths:
    .

version: 2

jobs:
  checkout:
    <<: *defaults

    steps:
      - checkout

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist

  build_docker:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
        name: Bootstrap
        command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)
      - run:
          name: Build Docker - Application Service Code
          command: |
            # pwd is here to prevent error when pre_docker_build returns nothing
            pwd

            docker build --tag $AWS_ECR_DOMAIN/papaya-extractor:$CIRCLE_SHA1 \
              --build-arg BUILD_NUM=$CIRCLE_BUILD_NUM \
              --build-arg SHA1=$CIRCLE_SHA1 \
              --build-arg EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --build-arg JFROG_AUTH=$JFROG_AUTH .

            docker push $AWS_ECR_DOMAIN/papaya-extractor:$CIRCLE_SHA1

  test:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Bootstrap
          command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local

      - setup_remote_docker
      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)


      - run:
          name: Copy service tests to volume
          command: |
            docker create -v /src/papaya_extractor/tests/ --name service_tests alpine:3.11 /bin/true
            docker cp $(pwd)/papaya_extractor/tests service_tests:/src/papaya_extractor/

      - run:
          name: Run Lint
          command: |
            docker run -it  --volumes-from service_tests ${AWS_ECR_DOMAIN}/papaya-extractor:${CIRCLE_SHA1} test



  lint:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Bootstrap
          command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local

      - setup_remote_docker
      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)

      - run:
          name: Copy service tests to volume
          command: |
            docker create -v /src/papaya_extractor/tests/ --name service_tests alpine:3.11 /bin/true
            docker cp $(pwd)/papaya_extractor/tests service_tests:/src/papaya_extractor/

      - run:
          name: Run Lint
          command: |
            docker run -it --volumes-from service_tests ${AWS_ECR_DOMAIN}/papaya-extractor:${CIRCLE_SHA1} lint

  typehinting:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Bootstrap
          command: |
            pip install cookiecutter
            ./scripts/instantiate.sh
            cd papaya-extractor && globality-build build-gen local

      - setup_remote_docker
      - run:
          name: Login AWS ECR
          command: |
            eval $(aws ecr get-login --no-include-email)

      - run:
          name: Copy service tests to volume
          command: |
            docker create -v /src/papaya_extractor/tests/ --name service_tests alpine:3.11 /bin/true
            docker cp $(pwd)/papaya_extractor/tests service_tests:/src/papaya_extractor/

      - run:
          name: Run Typehinting
          command: |
            docker run -it --volumes-from service_tests ${AWS_ECR_DOMAIN}/papaya-extractor:${CIRCLE_SHA1} typehinting
  deploy_owndev:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy owndev
          command: |
            export CLUSTER="service-owndev"
            export ENVIRONMENT=$(globality-build get-dev --branch ${CIRCLE_BRANCH})
            if [ -z "$ENVIRONMENT" ]
            then
                exit 0
            fi
            export NAME=papaya-extractor
            globality-build docker-tag \
                --service papaya-extractor \
                --sha ${CIRCLE_SHA1} \
                --tag ${CIRCLE_BRANCH//\//-}

            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  build_lambda_function_owndev:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Upload lambda to s3
          command: |
            export NAME=papaya-extractor
            export ENVIRONMENT=$(globality-build get-dev --branch ${CIRCLE_BRANCH})
            if [ -z "$ENVIRONMENT" ]
            then
              exit 0
            fi
            export FUNCTION_NAME="papaya-extractor-(.+?)-$ENVIRONMENT$"
            export FUNCTION=$(aws lambda list-functions | jq  --arg FUNC $FUNCTION_NAME '.Functions[] | select( .FunctionArn | test($FUNC)) | .FunctionName ') && echo $FUNCTION
            if [ -z "$FUNCTION" ]
            then
              echo "Lambda function papaya-extractor not found. Exiting"
              exit 0
            fi
            pip3 install -r requirements.txt --extra-index-url $EXTRA_INDEX_URL --target="venv"
            build_lambda.sh $NAME
            VERSION_NAME=$NAME-$CIRCLE_SHA1
            # To keep revisions in s3, in case we want to revert our changes, we will save our file with SHA1 in name
            mv $NAME.zip $VERSION_NAME.zip
            publish_lambda.sh $ENVIRONMENT $VERSION_NAME.zip

  deploy_demo:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy demo
          command: |
            export CLUSTER="service-demo"
            export ENVIRONMENT=demo
            if [ -z "$ENVIRONMENT" ]
            then
                exit 0
            fi
            export NAME=papaya-extractor
            globality-build docker-tag \
                --service papaya-extractor \
                --sha ${CIRCLE_SHA1} \
                --tag master

            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  build_lambda_function_demo:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Upload lambda to s3
          command: |
            export NAME=papaya-extractor
            export ENVIRONMENT=demo
            if [ -z "$ENVIRONMENT" ]
            then
              exit 0
            fi
            export FUNCTION_NAME="papaya-extractor-(.+?)-$ENVIRONMENT$"
            export FUNCTION=$(aws lambda list-functions | jq  --arg FUNC $FUNCTION_NAME '.Functions[] | select( .FunctionArn | test($FUNC)) | .FunctionName ') && echo $FUNCTION
            if [ -z "$FUNCTION" ]
            then
              echo "Lambda function papaya-extractor not found. Exiting"
              exit 0
            fi
            pip3 install -r requirements.txt --extra-index-url $EXTRA_INDEX_URL --target="venv"
            build_lambda.sh $NAME
            VERSION_NAME=$NAME-$CIRCLE_SHA1
            # To keep revisions in s3, in case we want to revert our changes, we will save our file with SHA1 in name
            mv $NAME.zip $VERSION_NAME.zip
            publish_lambda.sh $ENVIRONMENT $VERSION_NAME.zip

  backup_ecr_demo:
    <<: *deploy_defaults
    steps:
      - setup_remote_docker
      - run:
          name: Backup ECR demo
          command: |
            # login to both regions is required to perform copy
            DESTINATION_REGION=eu-west-1
            eval $(aws ecr get-login --no-include-email)
            eval $(aws ecr get-login --no-include-email --region $DESTINATION_REGION)
            globality-build docker-duplicate \
                --service papaya-extractor \
                --tag master \
                --destination-region $DESTINATION_REGION \
                --no-dry-run


workflows:
  version: 2

  build-and-release:
    jobs:
      - checkout:
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - build_docker:
          requires:
            - checkout
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - test:
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - lint:
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - typehinting:
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
 
      - build_lambda_function_owndev:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              only: /.*/


      - deploy_owndev:
          requires:
            - test
            - lint
            - typehinting
            - build_lambda_function_owndev
          filters:
            branches:
              only: /.*/

 
      - build_lambda_function_demo:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              only: master


      - deploy_demo:
          requires:
            - test
            - lint
            - typehinting
            - build_lambda_function_demo
          filters:
            branches:
              only: master

      - backup_ecr_demo:
          requires:
            - deploy_demo
          filters:
            branches:
              only: master


