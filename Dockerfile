#
#  Globality autogenerated Docker configuration
#
#  This file is auto generated with globality-build.
#  You should not make any changes to this file manually
#
#  Any changes made to this file will be overwritten in the
#  next version of the build.
#
#  See: http://github.com/globality-corp/globality-build
#
#

# Optionally import other docker images that are used downstream to copy data
# from pre-build repositories

# ----------- deps -----------
# Start with a Debian-based image (with apt-get)
FROM python:3.7-alpine as deps

#
# Most services will use the same set of packages here, though a few will install
# custom dependencies for native requirements.
#

ARG EXTRA_INDEX_URL
ENV EXTRA_INDEX_URL ${EXTRA_INDEX_URL}

ARG WANDB_API_KEY
ENV WANDB_API_KEY ${WANDB_API_KEY}

ENV DEBIAN_FRONTEND=noninteractive

ENV BASE_PACKAGES "libpcre3 libpcre3-dev"
ENV CORE_PACKAGES locales procps iputils-ping iputils-tracepath
ENV BUILD_PACKAGES build-essential libffi-dev
ENV OTHER_PACKAGES libssl-dev curl


RUN apt-get update && \
    apt-get install -y --no-install-recommends ${BASE_PACKAGES} ${CORE_PACKAGES} ${BUILD_PACKAGES} && \
    apt-get install -y --no-install-recommends ${OTHER_PACKAGES} && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*


# ----------- base -----------
FROM deps as base

# Install dependencies
#
# Since many Python distributions require a compile for their native dependencies
# we install a compiler and any required development libraries before the installation.
# At the end, we will *remove* the compiler when we are done, to reduce the size of the
# docker image.
#
# We can control dependency freezing by managing the contents of `requirements.txt`.
#
# We can speed up the installation a little bit by breaking out the common
# pip dependencies into their own layer, but avoid this optimization for
# now to improve clarity.
#
# We also install the web application server (which should not be one of our
# explicit dependencies).
#
# Many services will need to modify this step for Python libraries with other
# native dependencies.


# Work in /src
#
# We'll copy local source code here for development.
WORKDIR src

# Set a proper locale
#
# UTF-8 everywhere.

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen "en_US.UTF-8" && \
    /usr/sbin/update-locale LANG=en_US.UTF-8
ENV LC_ALL en_US.UTF-8

# Install top-level files
#
# These are enough to install dependencies and have a stable base layer
# when source code changes.

# copy pyproject.toml, mypy.ini, requirements-build.txt only if they exist
COPY MANIFEST.in requirements.txt requirements-build.tx[t] setup.cfg setup.py pyproject.tom[l] mypy.in[i] conftest.py /src/

# custom commands that are defined in build.json in service repo

RUN pip install --upgrade pip wheel && \
    pip install --no-cache-dir --upgrade uwsgi && \
    pip install --no-cache-dir --upgrade -r requirements.txt --extra-index-url ${EXTRA_INDEX_URL}

# ----------- final -----------

FROM base

# Setup invocation
#
# We expose the application on the standard HTTP port and use an entrypoint
# to customize the `dev` and `test` targets.

ENV NAME papaya_extractor
COPY README.md entrypoint.sh /src/
ENTRYPOINT ["./entrypoint.sh"]
CMD ["uwsgi"]
EXPOSE 80


# Install source
#
# We should not need to reinstall dependencies here, but we do need to import
# the distribution properly. We also save build arguments to the image using
# microcosm-compatible environment variables.


ARG BUILD_NUM
ARG SHA1
ENV PAPAYA_EXTRACTOR__BUILD_INFO_CONVENTION__BUILD_NUM ${BUILD_NUM}
ENV PAPAYA_EXTRACTOR__BUILD_INFO_CONVENTION__SHA1 ${SHA1}

ENV PAPAYA_EXTRACTOR__BUILD_INFO__BUILD_NUM ${BUILD_NUM}
ENV PAPAYA_EXTRACTOR__BUILD_INFO__SHA1 ${SHA1}

# Creating below environment variable would be used in entrypoint.sh specifically for AI services to help reference models deployed in S3.
# By design, below environment variable is not namespaced by repo_name, as opposed to above environment variables which follow microcosm convention.
# DO NOT REMOVE
ENV SHA1 ${SHA1}

# Configuration required by wandb product
ENV WANDB_CONFIG_DIR /src

COPY $NAME /src/$NAME/

RUN pip install --no-cache-dir --extra-index-url $EXTRA_INDEX_URL -e .

RUN apt-get remove --purge -y ${BUILD_PACKAGES} && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*
